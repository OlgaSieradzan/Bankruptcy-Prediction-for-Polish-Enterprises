accuracy <- 100 * sum(diag(tab)) / sum(tab)
false_negative_rate <- 100 * tab["1", "0"] / sum(tab["1", ])
cat("Accuracy: ", round(accuracy, 2), "%\n")
cat("False negative rate: ", round(false_negative_rate, 2), "%\n")
xgb_model <- xgboost(
data = (as.matrix(training_set[,final_variables])),
label = as.numeric(training_set$V65)-1,
nrounds = 500,
objective = "binary:logistic",
verbose = 0
)
pred_prob <- predict(xgb_model,  (as.matrix(testing_set[,final_variables])))
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
print(length(pred_class))
tab <- table(
"Actual" = testing_set$V65,
"Predicted" = pred_class
)
print(tab)
accuracy <- 100 * sum(diag(tab)) / sum(tab)
false_negative_rate <- 100 * tab["1", "0"] / sum(tab["1", ])
cat("Accuracy: ", round(accuracy, 2), "%\n")
cat("False negative rate: ", round(false_negative_rate, 2), "%\n")
xgb_model <- xgboost(
data = (as.matrix(training_set[,final_variables])),
label = as.numeric(training_set$V65)-1,
nrounds = 10,
objective = "binary:logistic",
verbose = 0
)
pred_prob <- predict(xgb_model,  (as.matrix(testing_set[,final_variables])))
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
print(length(pred_class))
tab <- table(
"Actual" = testing_set$V65,
"Predicted" = pred_class
)
print(tab)
accuracy <- 100 * sum(diag(tab)) / sum(tab)
false_negative_rate <- 100 * tab["1", "0"] / sum(tab["1", ])
cat("Accuracy: ", round(accuracy, 2), "%\n")
cat("False negative rate: ", round(false_negative_rate, 2), "%\n")
xgb_model <- xgboost(
data = (as.matrix(training_set[,final_variables])),
label = as.numeric(training_set$V65)-1,
nrounds = 200,
objective = "binary:logistic",
verbose = 0
)
pred_prob <- predict(xgb_model,  (as.matrix(testing_set[,final_variables])))
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
print(length(pred_class))
tab <- table(
"Actual" = testing_set$V65,
"Predicted" = pred_class
)
print(tab)
accuracy <- 100 * sum(diag(tab)) / sum(tab)
false_negative_rate <- 100 * tab["1", "0"] / sum(tab["1", ])
cat("Accuracy: ", round(accuracy, 2), "%\n")
cat("False negative rate: ", round(false_negative_rate, 2), "%\n")
altmanmodel <- training_set[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
altmanmodel <- training_set[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Nieupadła", "Nieupadła", "Nieupadła", "Upadła", "Upadła", "Upadła"),Prognoza= c("Nieupadła", "Szara strefa", "Upadła", "Nieupadła", "Szara strefa", "Upadła"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
altmanmodel <- training_set[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Alive", "Alive", "Alive", "Bancrupted", "Bancrupted", "Bancrupted"),Prognoza= c("Alive", "Grey area", "Bancrupted", "Alive", "Grey area", "Bancrupted"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
library(foreign)
library(caret)
library(dplyr)
library(MASS)
library(naivebayes)
library(randomForest)
library(xgboost)
library(writexl)
y5 <- read.csv("5year.arff", header = TRUE, comment.char = "@")
colnames(y5) <- paste0("V", 1:65)
#Removing missing data
data <- y5[-which(y5 == "?"),]
data[,1:64] <- lapply(data[,1:64], as.numeric)
data <- na.omit(data)
data$V65 <- as.factor(data$V65)
#Making seperate data frames for each class
def <- data %>% filter(V65 == 1)
no_def <- data %>% filter(V65 == 0)
set.seed(900) #We'll be randomly selecting data
#Training set
train_no_def <- no_def[sample(1:nrow(no_def), 70, replace = T),]
train_def <- def[sample(1:nrow(def), 70, replace = T),]
training_set <- rbind(train_no_def,train_def)
#Testing set
test_def <- def[!rownames(def) %in% rownames(train_def), ]
test_def <- test_def[sample(1:nrow(test_def), 32, replace = FALSE), ]
test_no_def <- no_def[!rownames(no_def) %in% rownames(train_no_def), ]
test_no_def <- test_no_def[sample(1:nrow(test_no_def), 32, replace = FALSE), ]
testing_set <- rbind(test_def, test_no_def)
#Choosing the variables that meet the formal criteria
variables <- c()
for(i in colnames(training_set[,-65])){
if(sd(training_set[[i]])/mean(training_set[[i]]) > 0.1){
variables <- c(variables, i)
}
}
cor_matrix <- cor(training_set[,variables], use = "complete.obs")
high_cor <- abs(cor_matrix) > 0.7
to_remove <- c()
for(i in 1:(ncol(cor_matrix)-1)){
for(j in (i+1):ncol(cor_matrix)){
if(abs(cor_matrix[i, j]) > 0.7){
to_remove <- c(to_remove, colnames(cor_matrix)[j])
}
}
}
to_remove <- unique(to_remove)
to_remove <- c(to_remove)
final_variables <- setdiff(variables, to_remove)
fmla <- reformulate(final_variables, response = "V65")
altmanmodel <- training_set[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Alive", "Alive", "Alive", "Bancrupted", "Bancrupted", "Bancrupted"),Prognoza= c("Alive", "Grey area", "Bancrupted", "Alive", "Grey area", "Bancrupted"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
write_xlsx(counts2, "lda1.xlsx")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
database <- read.csv("5year.arff", header = TRUE, comment.char = "@")
upadle <- database[database$X0 == 0,]
zywe <- database[database$X0 == 1,]
set.seed(900)
nauka_up <- upadle[sample(1:5499, 100, replace = T),]
nauka_zy <- zywe[sample(1:410, 100, replace = T),]
nauka <- rbind(nauka_up,nauka_zy)
test_upadle <- upadle[!rownames(upadle) %in% rownames(nauka_up), ]
test_upadle <- test_upadle[sample(1:nrow(test_upadle), 50, replace = FALSE), ]
test_zywe <- zywe[!rownames(zywe) %in% rownames(nauka_zy), ]
test_zywe <- test_zywe[sample(1:nrow(test_zywe), 50, replace = FALSE), ]
testowe <- rbind(test_upadle, test_zywe)
altmanmodel_nauka <- nauka[,c(3,6,7,8,9)]
altmanmodel_nauka_up <- nauka_up[,c(3,6,7,8,9)]
altmanmodel_nauka_zy <- nauka_zy[,c(3,6,7,8,9)]
colnames(altmanmodel_nauka) <- c("X1", "X2", "X3", "X4", "X5")
colnames(altmanmodel_nauka_up) <- c("X1", "X2", "X3", "X4", "X5")
colnames(altmanmodel_nauka_zy) <- c("X1", "X2", "X3", "X4", "X5")
altmanmodel_nauka <- as.data.frame(lapply(altmanmodel_nauka, as.numeric))
altmanmodel_nauka_up <- as.data.frame(lapply(altmanmodel_nauka_up, as.numeric))
altmanmodel_nauka_zy <- as.data.frame(lapply(altmanmodel_nauka_zy, as.numeric))
p1 <- ggplot()+
geom_density(data = altmanmodel_nauka_up, aes(x = X1, color = "Nieupadłe"), size = 1)+
geom_density(data = altmanmodel_nauka_zy, aes(x = X1, color ="Upadłe"), size = 1) +
xlim(-1,1)+
labs(title = "Aktywa obrotowe / Aktywa ogółem", y = NULL, x = NULL)+
scale_color_manual(breaks = c("Upadłe", "Nieupadłe"), values = c("#CD1076", "orange"))+
theme_light()
p2 <- ggplot()+
geom_density(data = altmanmodel_nauka_up, aes(x = X2, color = "Nieupadłe"), size = 1)+
geom_density(data = altmanmodel_nauka_zy, aes(x = X2, color ="Upadłe"), size = 1) +
xlim(-0.5,1)+
labs(title = "Zysk zatrzymany / Aktywa ogółem", y = NULL, x = NULL)+
scale_color_manual(breaks = c("Upadłe", "Nieupadłe"), values = c("#CD1076", "orange"))+
theme_light()
p3 <- ggplot()+
geom_density(data = altmanmodel_nauka_up, aes(x = X3, color = "Nieupadłe"), size = 1)+
geom_density(data = altmanmodel_nauka_zy, aes(x = X3, color ="Upadłe"), size = 1) +
xlim(-1,1)+
labs(title = "Zysk przed spłatą odsetek i podatkiem / Aktywa ogółem", y = NULL, x = NULL)+
scale_color_manual(breaks = c("Upadłe", "Nieupadłe"), values = c("#CD1076", "orange"))+
theme_light()
p4 <- ggplot()+
geom_density(data = altmanmodel_nauka_up, aes(x = X4, color = "Nieupadłe"), size = 1)+
geom_density(data = altmanmodel_nauka_zy, aes(x = X4, color ="Upadłe"), size = 1) +
labs(title = "Wartość rynkowa kapitału akcyjnego / Wartość księgowa zadłużenia", y = NULL, x = NULL)+
scale_color_manual(breaks = c("Upadłe", "Nieupadłe"), values = c("#CD1076", "orange"))+
theme_light()
p5 <- ggplot()+
geom_density(data = altmanmodel_nauka_up, aes(x = X5, color = "Nieupadłe"), size = 1)+
geom_density(data = altmanmodel_nauka_zy, aes(x = X5, color ="Upadłe"), size = 1) +
labs(title = "Przychody ze sprzedaży / Aktywa ogółem", y = NULL, x = NULL)+
scale_color_manual(breaks = c("Upadłe", "Nieupadłe"), values = c("#CD1076", "orange"))+
theme_light()
plot_grid(p1,p2,p3, nrow = 3)
plot_grid(p4,p5, nrow = 2)
altmanmodel <- rbind(nauka, testowe)
altmanmodel <- altmanmodel[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel <- as.data.frame(lapply(altmanmodel, function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
return(x)
}))
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel%>%
ggplot()+
geom_boxplot(aes(y = 1, x = Z_score), size = 0.5, color = "#CD1076")+
xlim(-25,18)+
geom_vline(xintercept = 1.8, color = "grey1", size = 1)+
geom_vline(xintercept = 3.0, color = "grey1", size = 1)+
annotate(
"rect", xmin = 1.8, xmax = 3, ymin = 0.6, ymax = 1.4,
fill = "grey1", alpha = 0.2) +
theme_light(base_size = 18)+
labs ( y = "", x = "Z_Score")
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
counts1 <- data.frame(Stan = names(table(altmanmodel$Wynik)), Count = as.vector(table(altmanmodel$Wynik)))
ggplot(counts1, aes(x = Stan, y = Count, fill = Stan)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = c("orange", "grey", "#CD1076")) +
labs(x = "", y = "Wielkość grupy", title = "") +
theme_minimal(base_size = 18) +
theme(legend.position = "none")
#zywe = 0 , upadle = 1
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Nieupadła", "Nieupadła", "Nieupadła", "Upadła", "Upadła", "Upadła"),Prognoza= c("Nieupadła", "Szara strefa", "Upadła", "Nieupadła", "Szara strefa", "Upadła"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
knitr::include_graphics("C:/Users/olgas/OneDrive/Documents/GitHub/Quantative-risk-models-summit/WhatsApp Image 2025-03-06 at 09.54.51_3e79e9e8.jpg")
library(MASS)
library(caret)
nauka <- as.data.frame(lapply(nauka, as.numeric))
testowe <- as.data.frame(lapply(testowe, as.numeric))
nauka <- as.data.frame(lapply(nauka, function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
return(x)
}))
testowe <- as.data.frame(lapply(testowe, function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
return(x)
}))
model_lda <- lda(X0 ~ ., data = nauka[, c(3,6,7,8,9,65)])
predictions <- predict(model_lda, newdata = testowe[,c(3,6,7,8,9)])
# upadłe  - 1 # żywe - 0
confusion_matrix <- table(testowe$X0, predictions$class)
matrixc <- data.frame(c(32,22), c(18,28))
colnames(matrixc) <- c( "Nie upadłe", "Upadłe")
rownames(matrixc) <- c( "Nie upadłe", "Upadłe")
matrixc
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
altmanmodel <- test_set[,c(3,6,7,8,9,65)]
altmanmodel <- testing_set[,c(3,6,7,8,9,65)]
altmanmodel <- as.data.frame(lapply(altmanmodel, as.numeric))
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Alive", "Alive", "Alive", "Bancrupted", "Bancrupted", "Bancrupted"),Prognoza= c("Alive", "Grey area", "Bancrupted", "Alive", "Grey area", "Bancrupted"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
write_xlsx(counts2, "lda1.xlsx")
altmanmodel
testing_set
altmanmodel <- testing_set[,c(3,6,7,8,9,65)]
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
altmanmodel
counts2 <- data.frame(Rzeczywistość = c("Alive", "Alive", "Alive", "Bancrupted", "Bancrupted", "Bancrupted"),Prognoza= c("Alive", "Grey area", "Bancrupted", "Alive", "Grey area", "Bancrupted"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
write_xlsx(counts2, "lda1.xlsx")
altmanmodel <- traning_set[,c(3,6,7,8,9,65)]
altmanmodel <- training_set[,c(3,6,7,8,9,65)]
colnames(altmanmodel) <- c("X1", "X2", "X3", "X4", "X5", "X6")
altmanmodel<- altmanmodel%>%
mutate(Z_score = 1.2*X1 + 1.4*X2 + 3.3*X3 + 0.6*X4+0.99*X5)
altmanmodel <- altmanmodel%>%
mutate(Wynik = ifelse(Z_score <1.8, "U", ifelse(Z_score<3.0, "SS", "NU")))
altmanmodel <- altmanmodel%>%
mutate(Dokladnosc = ifelse(Wynik=="U" & X6 == 1,"UU", ifelse(Wynik=="NU" & X6 == 0, "NUNU", ifelse(Wynik=="NU" & X6 == 1, "UNU", ifelse(Wynik=="U" & X6 == 0, "NUU", ifelse(Wynik=="SS" & X6 == 0, "NUSS", "USS"))))))
counts2 <- data.frame(Rzeczywistość = c("Alive", "Alive", "Alive", "Bancrupted", "Bancrupted", "Bancrupted"),Prognoza= c("Alive", "Grey area", "Bancrupted", "Alive", "Grey area", "Bancrupted"), Ilość = as.vector(table(altmanmodel$Dokladnosc)))
counts2
write_xlsx(counts2, "lda1.xlsx")
model_lda <- lda(V65 ~ ., data = training_set[, c(3,6,7,8,9,65)])
predictions <- predict(model_lda, newdata = testowe[,c(3,6,7,8,9)])
model_lda <- lda(V65 ~ ., data = training_set[, c(3,6,7,8,9,65)])
predictions <- predict(model_lda, newdata = testing_set[,c(3,6,7,8,9)])
model_lda <- lda(V65 ~ ., data = training_set[,final_variables])
model_lda <- lda(V65 ~ ., data = training_set[,c(final_variables, "V65")])
predictions <- predict(model_lda, newdata = testing_set[,final_variables])
model_lda <- lda(V65 ~ ., data = training_set[,c(final_variables, "V65")])
predictions <- predict(model_lda, newdata = testing_set[,final_variables])
# upadłe  - 1 # żywe - 0
confusion_matrix <- table(testing_set$V65, predictions$class)
matrixc <- data.frame(c(32,22), c(18,28))
colnames(matrixc) <- c( "Alive", "Bancrupted")
rownames(matrixc) <- c( "Alive", "Bancrupted")
matrixc
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy
# upadłe  - 1 # żywe - 0
confusion_matrix <- table(testing_set$V65, predictions$class)
confusion_matrix
Rates <- read_excel("Results_sheets.xlsx",
sheet = "Rates")
Altman <- read_excel("Results_sheets.xlsx",
sheet = "LDA")
Matrixes <- read_excel("Results_sheets.xlsx",
sheet = "Matrix")
Matrixes[, Matrixes$method == "altman"]
Matrixes
Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive"))
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Actual == "1", "Bancrupted", "Alive"))
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
y5 <- read.csv("5year.arff", header = TRUE, comment.char = "@")
colnames(y5) <- paste0("V", 1:65)
Rates <- read_excel("Results_sheets.xlsx",
sheet = "Rates")
Altman <- read_excel("Results_sheets.xlsx",
sheet = "LDA")
Matrixes <- read_excel("Results_sheets.xlsx",
sheet = "Matrix")
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
Matrixes%>%
filter(method = "altman")
Matrixes%>%
filter(method == "altman")
Matrixes
LDA
Altman
Rates %>%
filter(method == "altman")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
Matrixes %>%
filter(method = "tutson")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
y5 <- read.csv("5year.arff", header = TRUE, comment.char = "@")
colnames(y5) <- paste0("V", 1:65)
Rates <- read_excel("Results_sheets.xlsx",
sheet = "Rates")
Altman <- read_excel("Results_sheets.xlsx",
sheet = "LDA")
Matrixes <- read_excel("Results_sheets.xlsx",
sheet = "Matrix")
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
Altman
Rates %>%
filter(method == "altman")
Matrixes %>%
filter(method = "tutson")
Matrixes %>%
filter(method == "tutson")
Rates %>%
filter(method == "tutson")
Matrixes %>%
filter(method == "qda")
Rates %>%
filter(method == "qda")
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
colnames(Rates) <- c("Accuracy", "False Negative Rate", "Method")
Altman
Rates %>%
filter(method == "altman")
Matrixes %>%
filter(Method == "tutson")
colnames(Rates) <- c("Accuracy", "False Negative Rate","Freq", "Method")
Rates
Rates %>%
filter(Method == "altman")
colnames(Rates) <- c("Accuracy", "False Negative Rate", "Method")
Rates %>%
filter(Method == "altman")
Matrixes %>%
filter(Method == "tutson")
Results
Rates
Matrixes %>%
filter(method == "naive bayes")
Rates %>%
filter(Method == "naive bayes")
Matrixes %>%
filter(method == "tutson")
Matrixes %>%
filter(method == "naive bayes")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
y5 <- read.csv("5year.arff", header = TRUE, comment.char = "@")
colnames(y5) <- paste0("V", 1:65)
Rates <- read_excel("Results_sheets.xlsx",
sheet = "Rates")
Altman <- read_excel("Results_sheets.xlsx",
sheet = "LDA")
Matrixes <- read_excel("Results_sheets.xlsx",
sheet = "Matrix")
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
colnames(Rates) <- c("Accuracy", "False Negative Rate", "Method")
Rates
Altman
Rates %>%
filter(Method == "altman")
Matrixes %>%
filter(method == "tutson")
Rates %>%
filter(Method == "tutson")
Matrixes %>%
filter(method == "qda")
Rates %>%
filter(Method == "qda")
Matrixes %>%
filter(method == "naive bayes")
Matrixes %>%
filter(method == "logistic regression")
Rates %>%
filter(Method == "logistic regression")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
y5 <- read.csv("5year.arff", header = TRUE, comment.char = "@")
colnames(y5) <- paste0("V", 1:65)
Rates <- read_excel("Results_sheets.xlsx",
sheet = "Rates")
Altman <- read_excel("Results_sheets.xlsx",
sheet = "LDA")
Matrixes <- read_excel("Results_sheets.xlsx",
sheet = "Matrix")
Matrixes <-Matrixes %>%
mutate(Actual = ifelse(Actual == "1", "Bancrupted", "Alive")) %>%
mutate(Predicted = ifelse(Predicted == "1", "Bancrupted", "Alive"))
colnames(Rates) <- c("Accuracy", "False Negative Rate", "Method")
Rates
Altman
Rates %>%
filter(Method == "altman")
Matrixes %>%
filter(method == "tutson")
Rates %>%
filter(Method == "tutson")
Matrixes %>%
filter(method == "qda")
Rates %>%
filter(Method == "qda")
Matrixes %>%
filter(method == "naive bayes")
Rates %>%
filter(Method == "naive bayes")
Matrixes %>%
filter(method == "logistic regression")
Rates %>%
filter(Method == "logistic regression")
